---
title: "AbsClassifications"
format: gfm
---

<!-- badges: start -->
[![CRAN status](https://www.r-pkg.org/badges/version/AbsClassifications)](https://CRAN.R-project.org/package=AbsClassifications)
<!-- badges: end -->


Install package from github as: 

```{r}
#| eval: false
devtools::install_github("kletts/AbsClassifications")
```

# Available classifications

The following package includes functions to import ABS hierarchical data [classification structures](https://www.abs.gov.au/statistics/classifications)
in a standard format.

The available structures, versions, and download functions are:

```{r}
#| echo: false
source("R/overview.R")
classifications |> 
  dplyr::mutate(ReleaseDate = format(as.Date(ReleaseDate), "%b %Y"), 
      FileName = paste(ifelse(Version=="", Abbrev, Version), "parquet", sep=".")) |> 
  knitr::kable(format = "pipe") 
```

## Direct download 

You can directly download any of the the classifications from this repository using the following URL:

`https://raw.githubusercontent.com/kletts/AbsClassifications/data/XXXX.parquet`

where `XXXX` refers to the file name for the classification as provided in the table above. For example, using the `arrow::read_parquet` function in R: 

```{r}
#| eval: FALSE
url <- "https://raw.githubusercontent.com/kletts/AbsClassifications/extdata/FCB.parquet"
arrow::read_parquet(url)
```

Parquet files are preferred because: 

 - the storage size is much smaller than other formats such as CSV, especially on the larger classifications 
 more repition of the codes and description on the top level; 
 - the file preserves the labelled vector format of the hierarchy, it imports both the codes 
 and descriptions as a `tibble::tibble` format table; 
 - the parquet format is easily read in almost all major programming languages including javascript (see `npm:apache-arrow`), python (eg see `pandas.read_parquet`) or SQL (eg see `DuckDB.read_parquet`). 

Note that the R `nanoparquet::read_parquet` function does not currently support labelled vectors. 

## Using functions

Where multiple versions or substructures are available, specify the version required, when calling the function, for example: 

```{r}
#| eval: false
get_ANZSRC("ANZSRCvFoR")
```

# Example 

```{r}
#| echo: false
#| message: false
devtools::load_all()
```

Using the Functional Classification of Buildings, once downloaded the result is a labelled vector with a column for each level of the hierarchy, here only the first 2 are shown: 

```{r}
strc <- get_FCB()
strc |> 
  dplyr::distinct(FCB_l1, FCB_l2) 
```

# Additional methods

The package includes two additional methods for working with ABS Classifications: 

## Convert to `data.tree`

The classification structures are naturally hierarchical, the structures once downloaded can be converted to a data tree object using the `as_datatree` function, here using the code descriptions:  

```{r}
strc  |> 
  dplyr::distinct(FCB_l1, FCB_l2) |> 
  as_datatree(type="desc")
```

## Flatten hierarchy

A hierarchy can be convert to a parent/child table of nodes using the function `flatten_datatree`, use the function in combination with `as_datatree`:

```{r}
strc  |> 
  as_datatree() |> 
  flatten_datatree() 
```

## Unlabel

The returned data frame includes labelled vector of hierarchy codes and descriptions. If you would prefer only the codes or the descriptions separately, apply the `unlabel` function to returned data frame. 

```{r}
strc  |> 
  dplyr::distinct(FCB_l1, FCB_l2) |> 
  unlabel()
```


